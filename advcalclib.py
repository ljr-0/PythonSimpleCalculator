import re
from math import *
import decimal

E = decimal.Decimal('2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264800168477411853742345442437107539077744992069551702761838606261331384583000752044933826560297606737113200709328709127443747047230696977209310141692836819025515108657463772111252389784425056953696770785449969967946864454905987931636889230098793127736178215424999229576351482208269895193668033182528869398496465105820939239829488793320362509443117301238197068416140397019837679320683282376464804295311802328782509819455815301756717361332069811250996181881593041690351598888519345807273866738589422879228499892086805825749279610484198444363463244968487560233624827041978623209002160990235304369941849146314093431738143640546253152096183690888707016768396424378140592714563549061303107208510383750510115747704171898610687396965521267154688957035035402123407849819334321068170121005627880235193033224745015853904730419957777093503660416997329725088687696640355570716226844716256079882651787134195124665201030592123667719432527867539855894489697096409754591856956380236370162112047742722836489613422516445078182442352948636372141740238893441247963574370263755294448337998016125492278509257782562092622648326277933386566481627725164019105900491644998289315056604725802778631864155195653244258698294695930801915298721172556347546396447910145904090586298496791287406870504895858671747985466775757320568128845920541334053922000113786300945560688166740016984205580403363795376452030402432256613527836951177883863874439662532249850654995886234281899707733276171783928034946501434558897071942586398772754710962953741521115136835062752602326484728703920764310059584116612054529703023647254929666938115137322753645098889031360205724817658511806303644281231496550704751025446501172721155519486685080036853228183152196003735625279449515828418829478761085263981395599006737648292244375287184624578036192981971399147564488262603903381441823262515097482798777996437308997038886778227138360577297882412561190717663946507063304527954661855096666185664709711344474016070462621568071748187784437143698821855967095910259686200235371858874856965220005031173439207321139080329363447972735595527734907178379342163701205005451326383544000186323991490705479778056697853358048966906295119432473099587655236812859041383241160722602998330535370876138939639177957454016137223618789365260538155841587186925538606164779834025435128439612946035291332594279490433729908573158029095863138268329147711639633709240031689458636060645845925126994655724839186564209752685082307544254599376917041977780085362730941710163434907696423722294352366125572508814779223151974778060569672538017180776360346245927877846585065605078084421152969752189087401966090665180351650179250461950136658543663271254963990854914420001457476081930221206602433009641270489439039717719518069908699860663658323227870937650226014929101151717763594460202324930028040186772391028809786660565118326004368850881715723866984224220102495055188169480322100251542649463981287367765892768816359831247788652014117411091360116499507662907794364600585194199856016264790761532103872755712699251827568798930276176114616254935649590379804583818232336861201624373656984670378585330527583333793990752166069238053369887956513728559388349989470741618155012539706464817194670834819721448889879067650379590366967249499254527903372963616265897603949857674139735944102374432970935547798262961459144293645142861715858733974679189757121195618738578364475844842355558105002561149239151889309946342841393608038309166281881150371528496705974162562823609216807515017772538740256425347087908913729172282861151591568372524163077225440633787593105982676094420326192428531701878177296023541306067213604600038966109364709514141718577701418060644363681546444005331608778314317444081194942297559931401188868331483280270655383300469329011574414756313999722170380461709289457909627166226074071874997535921275608441473782330327033016823719364800217314')
PI = decimal.Decimal('3.141592646213542282149344431982695774314437223345602794559539484821434767220795264694643448917991305879164621705535188442692995943470362111923739681179958736576363907084342931450942394899921183673857971703487633920451060508862477138697445011975595819591178663703119106652209062422531024241796665754348697348004518821485689267478610281209486160824640075197621208806439587870791716258988628640907629010918139149013250231997157310590323054416533109635187266992895461083024753433971913590216260360220405827412847758511214263777802150234914081972370755553638111308997125116036733933640929504739848476056542804617168825299904305178140800993980593101220914985990549079984548368668619772815061607537106543380426568377560862604710028374349561731696112951135747426484672197156765386651866428687106800590814836408817914514460647065520971296744821284921720344206810148741218937154284703784790977421658554307341204200703086089758217520703729558275445098275689876636417983778200731694631071830643962493918309186078818549395035211756298676329789832766281759574635475948736639035640333534073943158440207347768040383553168015750386932943913498158246302986250616377763244090737962147717154866655881106046044870031046809273453463423838741340454477368368354664600758567597793944354890234155525816659854584242361005390079441295451029245588089297756516382141108498818143007462455449510878613807118157239641666375738590183092524530058668403343436026933065401686576826444474607273949127096912607574332168097168941342336174431920662407970269908690307262166466926495926998143396826291408550919985232833053461579106778166421164274098754092130421464912614904525294433080431368977360866677252138098543313677695010137366964948508715621103243929591729228483483323369752883432662128125230989864431109816580260713636674656411642962828449773367171091407497773912247781994398182772525118536946000739460547509642665946097782784273802940772367795882374851496694039213239803575442000222997725066626394465441461065848796665771949311891556431228242529260971659850391355621669363308129568346068190628122942786708546859583889345632743908977621230872602820871729436030441901315201878240840881108644878705082285464246757735765074544968447556593958087275619907242279976429428932679616299254127975184563166583438855017525287356008265470264471999664937958497891780083932680340928054129436600159569060415337565946991567130354439536959465674804763098971971179555350478941291999127656086308627716945559822959440651903850346666849516856272958597923175139133662731462349638578902262106078820019240588182301868179891262301116594377697521041645884411581139911554945962451514997818475177593377526898625035755975904633107562320709953166680741869047276719525793320265335034085492129432929670833777409361368698721019092781858628657890225271581341474845484195610015803266697467405593083508353432039792808091885309704294130344287683400807143761461214139379572760260864937425474274530087626206932235696974175523432294404193280686936798611201001784569837727760205945693777846815401374329909896300116966859164558775460515366131576338000237178823906865504826154127972201154419594171590978966404523918285573434382951324184400912775448584468640714551439454053592991218357566739547611990147590598461772627581639106216661041531628073997166847632836307483160905702983068481676689844758687272716941725003884551459198743051518446545483984347055938347413926132936572151898843342871005560128779043621922791877175738127076722908664796648604347214338442291659647055503319855805484650841386510009564673195315432441096590949648795662175157898347346146497077291239552881472023246357311015908917290421628938940931684638174424193969243134565863362533297018539658691445866695038810715450597910337153210399702304004193486758092565009614215328704954953804673736932618800919761173781627634150481527001558382055024965884733777747902849775119806984344532849570777986445158968815441821080749889183655105739951955772711032236387403764425467549891000064558781614073548919458695383924711510042439637495088763001789423756399571191223127547222531452397161694965289355071643542912849437611')
    

# 将算式从字符串处理成列表，解决横杠是负号还是减号的问题
def formula_format(formula):
    
    """
    解释参数类型
    :param formula: str
    """
    formula = re.sub(' ', '', formula)
    # re.sub()在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串
    # 去掉算式中的空格s
    # 以 '横杠数字' 分割， 其中正则表达式：(\-\d+\.?\d*) 括号内：
    # \- 表示匹配横杠开头；\d+ 表示匹配数字1次或多次；\.?表示匹配小数点0次或1次;\d*表示匹配数字0次或多次。
    # []中的字符是任选择一个使用，括号(…)可以把(…)看出一个整体,经常与"+"、"*"、"?"的连续使用,对（…）部分进行重复.
    formula_list = [i for i in re.split('(\-[\d+,π,e]\.?\d*)', formula) if i]
    # re.split()将一个字符串按照正则表达式匹配结果进行分割，返回列表类型
    final_formula = []  # 最终的算式列表
    for item in formula_list:
        # 算式以横杠开头，则第一个数字为负数，横杠为负号
        # re.match()从一个字符串的开始位置起匹配正则表达式，返回match对象
        # 如果不是起始位置匹配成功的话，match()就返回none
        # $字符比配字符串的结尾位置
        if len(final_formula) == 0 and re.match('\-[\d+,π,e]\.?\d*$', item):
            final_formula.append(item)
            continue
        # 如果当前的算式列表最后一个元素的第一个位置是运算符['+', '-', '*', '/', '('， '%'， '^'], 
        # 则横杠为减号
        if len(final_formula) > 0:
            # 输出为none或者数字
            if re.match('[\+\-\*\/\(\%\^]$', final_formula[-1]):
                final_formula.append(item)
                continue
        # 按照运算符分割开
        item_split = [i for i in re.split('([\+\-\*\/\(\)\%\^\√])', item) if i]
        final_formula += item_split
    return final_formula
# 判断是否是运算符，如果是返回True
def rad(decimal_num):
    return decimal_num * PI / 180
def is_operator(e):
    """
    :param e: str
    :return: bool
    """
    opers = ['+', '-', '*', '/', '(', ')', '%',
             '^', '√', 'sin', 'arcsin', 'cos', 'arccos', 'tan', 'arctan', 'deg', 'rad', 'ln']
    return True if e in opers else False  # 在for循环中嵌套使用if和else语句

# 比较连续两个运算符来判断是压栈还是弹栈
def decision(tail_op, now_op):
    """
    :param tail_op: 运算符栈的最后一个运算符
    :param now_op: 从算式列表取出的当前运算符
    :return: 1代表弹栈运算，0代表弹出运算符栈最后一个元素'('，-1表示压栈
    """
    # 定义4种运算符级别
    rate1 = ['+', '-']
    rate2 = ['*', '/', '%']
    rate3 = ['^', '√', 'sin', 'arcsin', 'cos', 'arccos', 'tan', 'arctan', 'deg', 'rad', 'ln']
    rate4 = ['(']
    rate5 = [')']

    if tail_op in rate1:
        if now_op in rate2 or now_op in rate3 or now_op in rate4:
            return -1  # 说明当前运算符优先级高于运算符栈的最后一个运算符，需要压栈
        else:
            return 1  # 说明当前运算符优先级等于运算符栈的最后一个运算符，需要弹栈运算

    elif tail_op in rate2:
        if now_op in rate3 or now_op in rate4:
            return -1
        else:
            return 1

    elif tail_op in rate3:
        if now_op in rate4:
            return -1
        else:
            return 1

    elif tail_op in rate4:
        if now_op in rate5:
            return 0  # '('遇上')',需要弹出'('并丢掉')',表明该括号内的算式已计算完成并将结果压入数字栈中
        else:
            return -1  # 只要栈顶元素为'('且当前元素不是')'，都应压入栈中


# 传入两个数字，一个运算符，根据运算符不同返回相应结果
def calculate(n1, n2, operator):
    """
    :param n1: float
    :param n2: float
    :param operator: + - * / % ^
    :return: float
    """
    result = decimal.Decimal(0)
    if operator == '+':
        result = n1 + n2
    if operator == '-':
        result = n1 - n2
    if operator == '*':
        result = n1 * n2
    if operator == '/':
        result = n1 / n2
    if operator == '%':
        result = n1 % n2
    if operator == '^' or operator == '**':
        result = n1 ** n2
    return result


# 括号内的算式求出计算结果后，计算√￣()、sin()或arcsin()
def gaojie(op_stack, num_stack):  # 运算符栈，数字栈
    if op_stack[-1] == '√':
        # pop() 函数用于移除列表中的一个元素(默认最后一个元素)，并且返回从列表中移除的元素对象。
        # append() 函数可以向列表末尾添加元素
        op = op_stack.pop()
        num2 = num_stack.pop()
        num_stack.append(num2 ** decimal.Decimal(0.5))
    elif op_stack[-1] == 'sin':
        op = op_stack.pop()
        num2 = num_stack.pop()
        num_stack.append(sin(rad(num2)))
    elif op_stack[-1] == 'arcsin':
        op = op_stack.pop()
        num2 = num_stack.pop()
        num_stack.append(asin(rad(num2)))
    elif op_stack[-1] == 'cos':
        op = op_stack.pop()
        num2 = num_stack.pop()
        num_stack.append(cos(rad(num2)))
    elif op_stack[-1] == 'arccos':
        op = op_stack.pop()
        num2 = num_stack.pop()
        num_stack.append(acos(rad(num2)))
    elif op_stack[-1] == 'tan':
        op = op_stack.pop()
        num2 = num_stack.pop()
        num_stack.append(tan(rad(num2)))
    elif op_stack[-1] == 'arctan':
        op = op_stack.pop()
        num2 = num_stack.pop()
        num_stack.append(atan(rad(num2)))
    elif op_stack[-1] == 'deg':
        op = op_stack.pop()
        num2 = num_stack.pop()
        num_stack.append(num2 * 180 / PI)
    elif op_stack[-1] == 'rad':
        op = op_stack.pop()
        num2 = num_stack.pop()
        num_stack.append(rad(num2))
    elif op_stack[-1] == 'ln':
        op = op_stack.pop()
        num2 = num_stack.pop()
        num_stack.append(log(num2))



# 负责遍历算式列表中的字符，决定压入数字栈中或压入运算符栈中或弹栈运算
def final_calc(formula_list,prec=1024):
    global PI, E
    decimal.getcontext().prec = prec % decimal.MAX_PREC
    """
    :param formula_list: 算式列表
    :return: 计算结果
    """
    num_stack = []  # 数字栈
    op_stack = []  # 运算符栈
    for item in formula_list:
        operator = is_operator(item)
        # 压入数字栈
        if not operator:
            # π和e转换成可用于计算的值
            if item == 'π' or item == 'pi':
                num_stack.append(PI)
            elif item == '-π' or item == '-pi':
                num_stack.append(-PI)
            elif item == 'e':
                num_stack.append(E)
            elif item == '-e':
                num_stack.append(-E)
            else:
                num_stack.append(decimal.Decimal(item))  # 字符串转换为浮点数
        # 如果是运算符
        else:
            while True:
                # 如果运算符栈为空，则无条件入栈
                if len(op_stack) == 0:
                    op_stack.append(item)
                    break
                # 决定压栈或弹栈
                tag = decision(op_stack[-1], item)
                # 如果是-1，则压入运算符栈并进入下一次循环
                if tag == -1:
                    op_stack.append(item)
                    break
                # 如果是0，则弹出运算符栈内最后一个'('并丢掉当前')'，进入下一次循环
                elif tag == 0:
                    op_stack.pop()
                    gaojie(op_stack, num_stack)
                    break
                # 如果是1，则弹出运算符栈内最后一个元素和数字栈内最后两个元素
                elif tag == 1:
                    if item in ['√', 'sin', 'arcsin', 'cos', 'arccos', 'tan', 'arctan', 'deg']:
                        op_stack.append(item)
                        break
                    op = op_stack.pop()
                    num2 = num_stack.pop()
                    num1 = num_stack.pop()
                    # 将计算结果压入数字栈并接着循环，直到遇到break跳出循环
                    num_stack.append(calculate(num1, num2, op))
    # 大循环结束后，数字栈和运算符栈中可能还有元素的情况
    while len(op_stack) != 0:
        op = op_stack.pop()
        num2 = num_stack.pop()
        num1 = num_stack.pop()
        num_stack.append(calculate(num1, num2, op))
    result = ''
    if len(num_stack) != 0:
        result = str(num_stack[0])
        if result[len(result) - 1] == '0' and result[len(result) - 2] == '.':
            result = result[0:-2]
        return result
    else:
        return
    #去掉无效的0和小数点，例：1.0转换为1
    


if __name__ == '__main__':
    formula = input()
    #formula = "e"
    formula_list = formula_format(formula)
    try:
        result = final_calc(formula_list)
        print(formula+':'+result)
    except:
        print('Cannot calculate:"'+formula+'"')
    input()